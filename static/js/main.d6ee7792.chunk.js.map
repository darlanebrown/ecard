{"version":3,"sources":["components/GreetingCard.jsx","components/GreetingCardForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["GreetingCard","form","setViewCard","cardType","Container","className","Row","Col","style","width","height","maxWidth","src","alt","fontSize","fontWeight","greetings","message","closing","Button","size","onClick","email","mailto","url","encodeURIComponent","window","open","GreetingCardForm","errors","setErrors","setForm","setCardType","useState","gif","setGif","useEffect","onChangeInput","e","preventDefault","target","name","value","length","prevState","renderErrorMessage","xs","sm","Form","Label","Check","type","label","id","checked","onChange","Group","Control","placeholder","as","rows","inputs","Object","entries","allInputsEntered","every","input","match","filter","forEach","App","viewCard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6ee7792.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Col, Container, Row } from 'react-bootstrap';\n\nfunction GreetingCard({ form, setViewCard, cardType }) {\n    const onSend = () => {\n        if (form.email) {\n            let mailto = `mailto:${form.email}?subject=E-card&body=You have received a greeting card%0D%0A`;\n            const url = `https://darlanebrown.github.io/ecard?greeting=${encodeURIComponent(form.greetings)}&body=${encodeURIComponent(form.message)}&closing=${encodeURIComponent(form.closing)}`;\n            mailto += encodeURIComponent(url);\n            window.open(mailto);\n        }\n    };\n\n    return (\n        <Container className=\"\">\n            <Row>\n                <Col className=\"d-flex flex-column justify-content-center align-items-center \">\n                    <img\n                        style={{\n                            width: 245,\n                            height: 350,\n                            maxWidth: '100%',\n                        }}\n                        src={\n                            cardType === 'christmas'\n                                ? 'https://media.giphy.com/media/GepjBlRKsD1uM/giphy.gif'\n                                : 'https://media.giphy.com/media/7k3ThwwMXnHCE/giphy.gif'\n                        }\n                        alt=\"card\"\n                    />\n                    <p style={{ fontSize: 20, fontWeight: 'bold' }}>\n                        {form.greetings}\n                    </p>\n                    <p style={{ fontSize: 20, fontWeight: 'bold' }}>\n                        {form.message}\n                    </p>\n                    <p style={{ fontSize: 20, fontWeight: 'bold' }}>\n                        {form.closing}\n                    </p>\n                    <div className=\"d-grid gap-2 flex-grow-1\">\n                        <Button\n                            size=\"lg\"\n                            className=\"flex-grow-1\"\n                            onClick={() => setViewCard(false)}\n                        >\n                            {form.email\n                                ? 'Reshare this card'\n                                : 'Continue editing'}\n                        </Button>\n                        {form.email && (\n                            <Button size=\"lg\" onClick={onSend}>\n                                Send\n                            </Button>\n                        )}\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default GreetingCard;\n","import React, { useEffect, useState } from 'react';\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap';\n\nfunction GreetingCardForm({\n    errors,\n    setErrors,\n    form,\n    setForm,\n    cardType,\n    setCardType,\n    setViewCard,\n}) {\n    const [gif, setGif] = useState('');\n\n    useEffect(() => {\n        setGif(\n            cardType === 'valentine'\n                ? 'https://media.giphy.com/media/7k3ThwwMXnHCE/giphy.gif'\n                : 'https://media.giphy.com/media/GepjBlRKsD1uM/giphy.gif'\n        );\n    }, [cardType]);\n\n    const onChangeInput = (e) => {\n        e.preventDefault();\n        const { name, value } = e.target;\n        setForm({ ...form, [name]: value });\n        if (errors[name] && errors[name].length > 0) {\n            setErrors((prevState) => ({ ...prevState, [name]: '' }));\n        }\n    };\n\n    const validateEmail = (email) => {\n        if (!email) {\n            setErrors((prevState) => ({\n                ...prevState,\n                email: 'Email is required',\n            }));\n            return false;\n        }\n\n        if (\n            !email.match(\n                /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n            )\n        ) {\n            setErrors((prevState) => ({\n                ...prevState,\n                email: 'Please enter a valid email address',\n            }));\n            return false;\n        }\n        setErrors((prevState) => ({ ...prevState, email: '' }));\n        return true;\n    };\n\n    const onSubmit = () => {\n        const inputs = Object.entries(form);\n        const allInputsEntered = inputs.every((input) => input[1].length > 0);\n        const isEmailValid = validateEmail(form.email);\n\n        if (!isEmailValid) {\n            return;\n        }\n\n        if (!allInputsEntered) {\n            inputs\n                .filter((input) => input[1].length === 0)\n                .forEach((input) => {\n                    setErrors((prevState) => ({\n                        ...prevState,\n                        [input[0]]: `${input[0]} is required`,\n                    }));\n                });\n            return;\n        }\n        setViewCard(true);\n    };\n\n    const renderErrorMessage = (message) =>\n        message && message.length > 0 ? (\n            <p className=\"text-danger\">{message}</p>\n        ) : null;\n\n    return (\n        <Container className=\"\">\n            <Row className=\"d-flex justify-content-center\">\n                <Col xs={12} sm={6}>\n                    <Container>\n                        <Row>\n                            <Col xs={12} sm={6}>\n                                <img\n                                    src={gif}\n                                    alt=\"gif\"\n                                    style={{\n                                        width: 245,\n                                        height: 350,\n                                        maxWidth: '100%',\n                                    }}\n                                />\n                            </Col>\n                            <Col\n                                xs={12}\n                                sm={6}\n                                className=\"d-flex justify-content-center flex-grow-1 flex-column\"\n                            >\n                                <p className=\"font-weight-bold\">\n                                    How to reshare:\n                                </p>\n                                <p>Write your own custom message below</p>\n                            </Col>\n                        </Row>\n                    </Container>\n                    <Form>\n                        <Form.Label>Select card type</Form.Label>\n                        <Form.Check\n                            type=\"radio\"\n                            label=\"Valentine\"\n                            id=\"type\"\n                            checked={cardType === 'valentine'}\n                            onChange={() => setCardType('valentine')}\n                        />\n                        <Form.Check\n                            type=\"radio\"\n                            label=\"Christmas\"\n                            id=\"christmas\"\n                            checked={cardType === 'christmas'}\n                            onChange={() => setCardType('christmas')}\n                        />\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Recepient Email address</Form.Label>\n                            <Form.Control\n                                type=\"email\"\n                                placeholder=\"name@example.com\"\n                                name=\"email\"\n                                onChange={onChangeInput}\n                                value={form.email}\n                            />\n                            {renderErrorMessage(errors.email)}\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Greetings</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Greetings\"\n                                name=\"greetings\"\n                                onChange={onChangeInput}\n                                value={form.greetings}\n                            />\n                            {renderErrorMessage(errors.greetings)}\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Message</Form.Label>\n                            <Form.Control\n                                as=\"textarea\"\n                                rows={3}\n                                name=\"message\"\n                                onChange={onChangeInput}\n                                value={form.message}\n                            />\n                            {renderErrorMessage(errors.message)}\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Closing</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Closing\"\n                                name=\"closing\"\n                                onChange={onChangeInput}\n                                value={form.closing}\n                            />\n                            {renderErrorMessage(errors.closing)}\n                        </Form.Group>\n                        <div className=\"d-grid gap-2\">\n                            <Button size=\"lg\" onClick={onSubmit}>\n                                Preview greeting card\n                            </Button>\n                        </div>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default GreetingCardForm;\n","import { useState } from 'react';\nimport './App.css';\nimport GreetingCard from './components/GreetingCard';\nimport GreetingCardForm from './components/GreetingCardForm';\n\nfunction App() {\n    const [cardType, setCardType] = useState('christmas');\n    const [form, setForm] = useState({\n        email: '',\n        greetings: 'Dear Mom,',\n        message: 'Try to not be stingy for christmas!',\n        closing: 'Love, your beautiful daughter Darla',\n    });\n    const [errors, setErrors] = useState({\n        email: '',\n        greetings: '',\n        message: '',\n        closing: '',\n    });\n    const [viewCard, setViewCard] = useState(true);\n\n    return (\n        <div className=\"border vh-100 d-flex align-items-center justify-content-center\">\n            {viewCard ? (\n                <GreetingCard\n                    form={form}\n                    setViewCard={setViewCard}\n                    cardType={cardType}\n                />\n            ) : (\n                <GreetingCardForm\n                    errors={errors}\n                    setErrors={setErrors}\n                    form={form}\n                    setForm={setForm}\n                    cardType={cardType}\n                    setCardType={setCardType}\n                    setViewCard={setViewCard}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default App;\n\n// import g_card from '../images/g_card.webp';\n// import images \n// import './App.css';\n// GreetingCard from './Components/GreetingCard';\n\n// function GreetingCard({ greeting, body, closing }) {\n//   return (\n//     <div className=\"App\">\n//       // <header className=\"App-header\">\n//       //   <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <button>\n//           Reshare this G card\n//         </button>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default GreetingCard;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}